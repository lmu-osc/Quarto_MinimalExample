---
title: "Add a README"
lang: en
engine: knitr
---

## Creating a README

Once you have prepared your project and settled on a license, it is time to add a final touch. Imagine you are coming back to your project in five years, having forgotten most of the details of what you did exactly. What would be useful to know in order to quickly understand what is going on in the project? This is what needs to be described in the README. While you could just start writing along, most READMEs have some sections in common which we describe below.

Name

:   How is the project called?

Badges and project status

:   Badges typically report quick facts, like [whether the project is actively maintained](https://www.repostatus.org/), [how many dependencies it has](https://tinyverse.netlify.app/), or [whether it has been published in a package repository](https://www.r-pkg.org/services#badges). Sometimes, the license, any associated DOIs, or quality metrics like code coverage by unit tests are communicated via badges as well.

Description

:   What is the project about? What are its features? Is there a published article associated with it?

Visuals

:   If there is anything you can show that demonstrates how the project can be used? Screenshots or other visuals can make the README more appealing.

Installation/Dependencies

:   What steps need to be taken to run the project? What software needs to be installed? Mention all dependencies here that are not explicitly managed by `renv`, such as the system dependencies of R packages as well as the version of Quarto.

    An overview over the system dependencies of R packages can be created using the function `pak::pkg_sysreqs()`. In combination with `renv`, we can obtain the system dependencies of all R packages in the current project:
    
    ```{.r filename="Console"}
    pak::pkg_sysreqs(renv::dependencies()$Package)
    ```
    
    The output may look like the following:
    
    ```txt
    ── Install scripts ─────────────────────── 
    dnf install -y make pandoc
    
    ── Packages and their system dependencies 
    fs        – make
    knitr     – pandoc
    rmarkdown – pandoc
    sass      – make
    ```
    
    We can see that `make` and `pandoc` were identified as system dependencies. One can obtain their version by running them with the `--version` argument:
    
    ```{.bash filename="Terminal"}
    make --version
    pandoc --version
    ```

    We also know that we need Quarto to create the PDF and that we installed the `apaquarto` extension, so let's find out these versions as well:^[Luckily, the extensions are included in the project folder, so technically their version is already recorded in the project's files.]
    
    ```{.bash filename="Terminal"}
    quarto --version
    quarto list extensions
    ```
    
    Finally, we know that we installed a $\TeX$ distribution to create the PDF, so let's find out its version by running:
    
    ```{.bash filename="Terminal"}
    quarto check
    ```
    
    The output is quite long and it might look slightly different for you, but the relevant sections are the following:
    
    ```txt
    [✓] Checking tools....................OK
          TinyTeX: (not installed)
          Chromium: (not installed)
    
    [✓] Checking LaTeX....................OK
          Using: Installation From Path
          Path: /usr/local/texlive/2024/bin/x86_64-linux
          Version: 2024
    ```
    
    We put all the information obtained about system dependencies and their versions in the README. Sharing the install scripts that were provided by `pak` is an additional courtesy to your readers.

Usage

:   Which files does the project contain? How are they organized? How can one run the project -- is there a master script or a particular order in which any scripts need to be executed? How long does it take to run all scripts? Is there additional documentation available?

Support

:   Do you offer support or help, for example, via GitHub discussions or a mailing list?

Contributing

:   If the project is active: Can other people contribute? How? Do you accept contributions? Do you review issues? This section is sometimes outsourced into a file called `CONTRIBUTING.md`.

Authors

:   Who was involved in creating this project? This involves you, your co-authors, and anybody you accepted contributions from.

Citation

:   Is there a recommended way to cite this project? We recommend to increase citability by using the [CodeMeta generator](https://codemeta.github.io/codemeta-generator/) to create the file `codemeta.json`. Alternatively, one can also use the R package [`codemetar`](https://docs.ropensci.org/codemetar/) to create the file.

License

:   Under which license are the contents in this project available?

Create your README now as the file `README.md`.
